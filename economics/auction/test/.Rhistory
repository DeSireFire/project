library(foreign)
library(stargazer)
library(ggplot2)
library(foreign)
library(stargazer)
data_clean=function(data,name,col,num){
#  col[which(is.nan(col))] = NA
#  col[which(col==Inf)] = NA
#   data=na.omit(col)
#   quantile(col, c(.05, .5, .95))
#data=data[!(is.na(col)),]
tall=quantile(col, c(1.0-num),na.rm= TRUE)
bottom=quantile(col, c(num),na.rm= TRUE)
data=data[data[name]<tall,]
data=data[data[name]>bottom,]
return(data)
}
sample= read.csv(file=file.path("G:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample= read.csv(file=file.path("E:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
reg_NUM = lm(resev_proxy ~ p_res_eva + num_bidder , data = sample2)
summary(reg_NUM)
reg_pri = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample2)
summary(reg_pri)
reg_pri2 = lm(num_bidder ~ p_res_eva +priority_people , data = sample2)
summary(reg_pri2)
library(plm)
View(sample2)
fixed <- plm(resev_proxy ~ p_res_eva+num_bidder+priority_people, data=sample2, index=c("city", "year"), model="within")
summary(fixed)
fixed <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+city , data=sample2)
summary(fixed)
library(foreign)
library(stargazer)
library(plm)
data_clean=function(data,name,col,num){
#  col[which(is.nan(col))] = NA
#  col[which(col==Inf)] = NA
#   data=na.omit(col)
#   quantile(col, c(.05, .5, .95))
#data=data[!(is.na(col)),]
tall=quantile(col, c(1.0-num),na.rm= TRUE)
bottom=quantile(col, c(num),na.rm= TRUE)
data=data[data[name]<tall,]
data=data[data[name]>bottom,]
return(data)
}
reg_pri_city_year <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+city+year , data=sample2)
summary(reg_pri_city_year)
sample= read.csv(file=file.path("E:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
reg_pri_city_year <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+city+year , data=sample2)
summary(reg_pri_city_year)
reg_pri_city_year <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri_city_year)
reg_pri_bidder = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample2)
summary(reg_pri_bidder)
View(reg_pri_bidder)
remove(reg_pri_bidder)
remove(reg_pri_city_year)
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='tex')
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample2)
summary(reg_pri)
# regress on number of bidders without control city and year
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people ), data = sample2)
summary(reg_pri_bidder0)
# regress on price index with control on city and year
reg_pri_bidder1 = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample2)
summary(reg_pri_bidder1)
# regress on number of bidders with control on city and year
reg_pri1 <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri1)
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='tex')
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample2)
summary(reg_pri)
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample2)
summary(reg_pri0)
# regress on number of bidders without control city and year
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people ), data = sample2)
summary(reg_pri_bidder0)
# regress on price index with control on city and year
reg_pri_bidder1 = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample2)
summary(reg_pri_bidder1)
# regress on number of bidders with control on city and year
reg_pri1 <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri1)
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people , data = sample2)
summary(reg_pri_bidder0)
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='tex')
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='latex')
sample3= read.csv(file=file.path("E:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample2_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample4=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample4)
summary(reg_pri0)
# regress on number of bidders without control city and year
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people , data = sample4)
summary(reg_pri_bidder0)
# regress on price index with control on city and year
reg_pri_bidder1 = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample4)
summary(reg_pri_bidder1)
# regress on number of bidders with control on city and year
reg_pri1 <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample4)
summary(reg_pri1)
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample4)
summary(reg_pri0)
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people , data = sample4)
summary(reg_pri_bidder0)
reg_pri_bidder1 = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample4)
summary(reg_pri_bidder1)
reg_pri1 <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample4)
summary(reg_pri1)
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='latex')
sample4=data_clean(sample3,'resev_proxy',sample$resev_proxy,0.01)
reg_pri0 = lm(resev_proxy ~ p_res_eva + num_bidder+priority_people , data = sample4)
summary(reg_pri0)
# regress on number of bidders without control city and year
reg_pri_bidder0 = lm(num_bidder ~ p_res_eva +priority_people , data = sample4)
summary(reg_pri_bidder0)
# regress on price index with control on city and year
reg_pri_bidder1 = lm(num_bidder ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample4)
summary(reg_pri_bidder1)
# regress on number of bidders with control on city and year
reg_pri1 <- lm(resev_proxy ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample4)
summary(reg_pri1)
# output the results for resev_proxy
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='latex')
library(foreign)
library(stargazer)
library(plm)
sample= read.csv(file=file.path("E:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
data_clean=function(data,name,col,num){
#  col[which(is.nan(col))] = NA
#  col[which(col==Inf)] = NA
#   data=na.omit(col)
#   quantile(col, c(.05, .5, .95))
#data=data[!(is.na(col)),]
tall=quantile(col, c(1.0-num),na.rm= TRUE)
bottom=quantile(col, c(num),na.rm= TRUE)
data=data[data[name]<tall,]
data=data[data[name]>bottom,]
return(data)
}
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
View(sample2)
sample= read.csv(file=file.path("E:\\Dropbox\\academic\\ideas\\IO field\\justice auction\\code2\\analysis\\", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
reg_pri_bid0 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_bid0)
reg_pri_bid1 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri_bid1)
reg_pri_bid0 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people+resev_proxy, data=sample2)
summary(reg_pri_bid0)
reg_pri_bid0 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_bid0)
reg_pri_freq1 <- lm(bid_freq ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_freq1)
reg_pri_freq0 <- lm(bid_freq ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_freq0)
library(foreign)
library(stargazer)
sample= read.csv(file=file.path("G:/Dropbox/academic/ideas/IO field/justice auction/code3/analysis", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
library(foreign)
library(stargazer)
sample= read.csv(file=file.path("E:/Dropbox/academic/ideas/IO field/justice auction/code3/analysis", "sample1_df.csv"), header=TRUE, sep="\t",encoding = "UTF-8")
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
data_clean=function(data,name,col,num){
#  col[which(is.nan(col))] = NA
#  col[which(col==Inf)] = NA
#   data=na.omit(col)
#   quantile(col, c(.05, .5, .95))
#data=data[!(is.na(col)),]
tall=quantile(col, c(1.0-num),na.rm= TRUE)
bottom=quantile(col, c(num),na.rm= TRUE)
data=data[data[name]<tall,]
data=data[data[name]>bottom,]
return(data)
}
sample2=data_clean(sample,'resev_proxy',sample$resev_proxy,0.01)
# regress on price index without control on city and year
reg_pri0 = lm(resev_proxy ~  num_bidder+priority_people , data = sample2)
summary(reg_pri0)
# regress on number of bidders without control city and year
reg_pri_bidder0 = lm((num_bidder) ~ p_res_eva +priority_people , data = sample2)
summary(reg_pri_bidder0)
# regress on price index with control on city and year
reg_pri_bidder1 = lm((num_bidder) ~ p_res_eva +priority_people +factor(city)+factor(year), data = sample2)
summary(reg_pri_bidder1)
# regress on number of bidders with control on city and year
reg_pri1 <- lm(resev_proxy ~ num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri1)
# regress on bidding spread without control on city and year
reg_pri_bid0 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_bid0)
# regress on bidding spread with control on city and year
reg_pri_bid1 <- lm(dist_high ~ p_res_eva+num_bidder+priority_people+factor(city)+factor(year) , data=sample2)
summary(reg_pri_bid1)
# regress on bidding freq without control on city and year
reg_pri_freq0 <- lm(bid_freq ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_freq0)
# regress on bidding freq with control on city and year
reg_pri_freq1 <- lm(bid_freq ~ p_res_eva+num_bidder+priority_people, data=sample2)
summary(reg_pri_freq1)
# output the results for resev_proxy
stargazer(reg_pri0,reg_pri1,reg_pri_bidder0,reg_pri_bidder1,type='text')
install.packages("RVAideMemoire")
setwd("E:/github/Project/economics/auction/test")
library(foreign)
library(stargazer)
library(ggplot2)
library(RVAideMemoire)
# load sample
# set the location first
sample= read.csv(file="sample_raw1_df.csv", header=TRUE, sep="\t",encoding = "UTF-8")
install.packages("mixOmics")
install.packages("RVAideMemoire")
install.packages("rcompanion")
install.packages("‘RVAideMemoire’")
install.packages("RVAideMemoire")
install.packages("C:/Users/xiaofeima/Downloads/mixOmics_6.3.2.tar.gz", repos = NULL, type = "source")
ecdf(1:10)
x3 <- sample(1:10, 25, replace=TRUE)
x3
install.packages("CvM2SL2Test")
install.packages("C:/Users/xiaofeima/Downloads/CvM2SL2Test_2.0-1.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/xiaofeima/Downloads/mixOmics_6.3.2.tar.gz", repos = NULL, type = "source")
install.packages("igraph")
install.packages("corpcor")
install.packages("tidyr")
install.packages("pillar")
install.packages("rlang")
update.packages("rlang")
library("rlang", lib.loc="D:/system/R-3.3.1/library")
remove.packages("rlang")
install.packages("C:/Users/xiaofeima/Downloads/rlang_0.3.1.tar.gz", repos = NULL, type = "source")
View(sample)
sample.shape
sample.dim
dim(sample)
sample[complete.cases(sample[ , 'win_bid']),]
dim(sample[complete.cases(sample[ , 'win_bid']),])
data_clean=function(data){
data=data[data['priority_people']==0]
data=data[data['num_bidder']>1]
data['win_norm']=data['win_bid'] / reserve_price
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data['priority_people']==0]
data=data[data['num_bidder']>1]
data['win_norm']=data['win_bid'] / data['reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
sample['reserve_price']
data_clean=function(data){
data=data[data['priority_people']==0]
data=data[data['num_bidder']>1]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
sample$win_bid/sample$reserve_price
data_clean=function(data){
data=data[data['priority_people']==0]
data=data[data['num_bidder']>1]
data$win_norm=data$win_bid / data$reserve_price
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
sample[sample['priority_people'] == 0]
data_clean=function(data){
data=data[data['priority_people']==0]
data$win_norm=data$win_bid / data$reserve_price
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data['priority_people']==0]
data[,'win_norm']=data$win_bid / data$reserve_price
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data['priority_people']==0]
data$win_norm=data['win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data['priority_people']==0]
data$win_norm=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
debugSource('E:/github/Project/economics/auction/test/common_test.R')
debugSource('E:/github/Project/economics/auction/test/common_test.R')
debugSource('E:/github/Project/economics/auction/test/common_test.R')
data
dim(data)
data_clean=function(data){
data=data[,data['priority_people']==0]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[,data[,'priority_people']==0]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data[,'priority_people']==0,]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
return(data)
}
sample_c = data_clean(sample)
cramer.test(sp1,sp2)
install.packages("cramer")
library(cramer)
cramer.test(sp1,sp3)
sp1= sample_c[sample_c$num_bidder==2,'win_norm']
sp2= sample_c[sample_c$num_bidder==2,'win_norm']
cramer.test(sp1,sp3)
cramer.test(sp1,sp2)
sp1= sample_c[sample_c$num_bidder==2,'win_norm']
sp2= sample_c[sample_c$num_bidder==3,'win_norm']
cramer.test(sp1,sp2)
sp1= sample_c[sample_c$num_bidder==3,'win_norm']
sp2= sample_c[sample_c$num_bidder==4,'win_norm']
cramer.test(sp1,sp2)
summary(cramer.test(sp1,sp2))
print(cramer.test(sp1,sp2))
help for
for (i in 1:5){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==i+1,'win_norm']
print(cramer.test(sp1,sp2))
}
install.packages("rlang")
for (i in 1:5){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
library(cramer)
for (i in 1:5){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
for (i in 2:5){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
cramer.test(sp1,sp2)
}
for (i in 2:5){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
i=6
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
1:5
1:5:2
1:2:5
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sp1= sample_c[sample_c$num_bidder==2,'win_norm']
sp2= sample_c[sample_c$num_bidder==4,'win_norm']
sp3= sample_c[sample_c$num_bidder==6,'win_norm']
df_ecdf=data.frame(sp1,sp2,sp3)
names(df_ecdf) <- c('N=2','N=4','N=6')
dim(sp1)
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="my legend", labels=c('N=2','N=4', 'N=6'))
library(ggplot2)
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="my legend", labels=c('N=2','N=4', 'N=6'))
data_clean=function(data){
data=data[data[,'priority_people']==0,]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
all=quantile(data$win_norm, c(0.95),na.rm= TRUE)
data=data[data['win_norm']<tall,]
return(data)
}
sample_c = data_clean(sample)
data_clean=function(data){
data=data[data[,'priority_people']==0,]
data[,'win_norm']=data[,'win_bid'] / data[,'reserve_price']
data=data[complete.cases(data[ , 'win_norm']),]
tall=quantile(data$win_norm, c(0.95),na.rm= TRUE)
data=data[data['win_norm']<tall,]
return(data)
}
sample_c = data_clean(sample)
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sp1= sample_c[sample_c$num_bidder==2,'win_norm']
sp2= sample_c[sample_c$num_bidder==4,'win_norm']
sp3= sample_c[sample_c$num_bidder==6,'win_norm']
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="my legend", labels=c('N=2','N=4', 'N=6'))
sample_c=sample_c[sample_c['city']=='suzhou']
sample_c = data_clean(sample)
sample_c=sample_c[sample_c['city']=='suzhou',]
sample_c = data_clean(sample)
sample_c=sample_c[sample_c['city']=='xuzhou',]
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sample_c=sample_c[sample_c['city']=='shenzhen',]
# start the CVM test
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sample_c = data_clean(sample)
sample_c=sample_c[sample_c['city']=='shenzhen',]
# start the CVM test
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sample_c=sample_c[sample_c['city']=='chengdu',]
sample_c = data_clean(sample)
sample_c=sample_c[sample_c['city']=='chengdu',]
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="my legend", labels=c('N=2','N=4', 'N=6')) +
guides(fill=guide_legend(title=""))
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="", labels=c('N=2','N=4', 'N=6'))
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="", labels=c('N=2','N=4', 'N=6')) +
ylab("ecdf") +
xlab("winning price / reserve price")
sample_c = data_clean(sample)
for (i in seq(2, 6, by=2)){
sp1= sample_c[sample_c$num_bidder==i,'win_norm']
sp2= sample_c[sample_c$num_bidder==(i+1),'win_norm']
print(cramer.test(sp1,sp2))
}
sp1= sample_c[sample_c$num_bidder==2,'win_norm']
sp2= sample_c[sample_c$num_bidder==4,'win_norm']
sp3= sample_c[sample_c$num_bidder==6,'win_norm']
df <- data.frame(x = c(sp1,sp2,sp3), ggg=factor(rep(1:3, c(length(sp1),length(sp2),length(sp3)))))
ggplot(df, aes(x, colour = ggg)) +
stat_ecdf()+
scale_colour_hue(name="", labels=c('N=2','N=4', 'N=6')) +
ylab("ecdf") +
xlab("winning price / reserve price")
